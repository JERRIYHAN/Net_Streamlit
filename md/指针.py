import streamlit as st
a='''# 指针
内存中字节的编号，称为**地址**/**指针**

🌰 以32位环境，4GB为例：
最小—— 0
最大—— 0X FFFF FFFF （十六进制）

指针 存放的是16进制数，代表某个量的地址
而指针自身也有地址，这个可以通过==对指针的指针==查明

## &与*
==\*== 
在变量名前，表示指针

==&==
取地址符号

``` c
    char p= ‘o’;
    char *zhizhen = &p;

    printf("This is an %c", &p)
```

## 数组
对于数组而言，传到函数里，会退化成指针（指向第一个元素）
* 这是因为，数组里面的地址是连续的，指向了第一个就能顺次指向后续
```c
    int a[]={1,2,3,4,5};
    int* p = a;
```

## 解引用 * （重要）
``` c
    int a;
    int *p = a;
    a == *p; --> true
    &a == p; --> ?
```
解引用，用\*表示。
* 已知：
    * p代表a的地址，*p代表a的值
    * 在这一过程中， * 负责解引用，将地址转换成值
    * 从这个视角观察 ` int *p = a; `就很容易理解

# 内存申请 malloc
🌰 想要申请字节为1024的，
```int*p=（int*）malloc（1024）；```

🌰 想要申请长度为n的整数型内存，可以写
```int *p = （int *）malloc（ sizeof（int）* n ）；```

注意指针类型与变量类型对应，int的指针就对应int的变量

* 据csdn某帖子，int \*p 与 int\* p 两种写法一样
* 同据上贴，int a[] 在函数定义时 与int *a一样'''

st.markdown(a)

